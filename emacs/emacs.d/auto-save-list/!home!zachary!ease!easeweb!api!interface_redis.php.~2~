<?php
sleep ( sleeptime );
// ini_set('display_errors',1);
// login
// 增加 devicetype 参数
if ($method == 'com.apperian.easesdk.authenticateuser') {
    
    $username = $params->email;
    $password = $params->password;
    $devicesn = $params->devicesn;
    $appserversn = $params->appServerSN;
    $devicetype = $params->devicetype;
    $useridcard = $params->useridcard;

    $userinfo = unserialize ( $sredis->get ( 'userinfo' . $username ) );
    $devicelist = unserialize ( $sredis->get ( 'devicelist' . $devicesn ) );
    $noval = false;
    
    $loginflag = $sredis->get ( 'LOGINFLAG' );
    if ($loginflag == 0) { // @todo 下次发布需要更改数据库字段 USERID 为devicesn
	$loginflaguser = $sredis->get ( 'loginflaguser' . $devicesn );
	if (! $loginflaguser) { // @author leo
	    $response ['result'] = array (
		'result' => 20,
		'message' => 'all users login flag is false' 
	    );
	    $ret = json_encode ( $response );
	    loginfo ( 'Response', '127.0.0.1', $ret );
	    ob_clean ();
	    echo $ret;
	    exit ();
	}
    }
    
// the params is empty
    if (empty ( $username ) || empty ( $password ) || empty ( $devicesn ) || empty($appserversn) || empty($devicetype)) {
	$response ['result'] = array (
	    'result' => 8,
	    'message' => 'The provided command has invalid arguments.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	if (ylenv) {
	    file_put_contents ( logurl . 'loginnoval.log', var_export ( $username . '|' . $password . '|' . $devicesn 
                                . '|' . $appserversn . '|' . $devicetype . '|' .$useridcard, TRUE ). "\r\n", FILE_APPEND );
	    $noval = true;
	} else {
	    echo $ret;
	    exit ();
	}
    }
    write_login_log ( $username, $devicesn ); // write login log
// check deivce
    if (empty ( $devicelist )) {
	$response ['result'] = array (
	    'result' => 14,
	    'message' => 'This device is not allow to login.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	if (ylenv) {
	    file_put_contents ( logurl . 'devicenotallow.log', var_export ( $devicesn . '|' . $devicelist, TRUE ) . '|' . $username . "\r\n", FILE_APPEND );
	    $noval = true;
	} else {
	    echo $ret;
	    exit ();
	}
    } else {
	if ($devicelist ['STATUS'] == 0) {
	    $response ['result'] = array (
		'result' => 14,
		'message' => 'This device is not allow to login.' 
	    );
	    $ret = json_encode ( $response );
	    loginfo ( 'Response', '127.0.0.1', $ret );
	    ob_clean ();
	    echo $ret;
	    exit ();
	}
    }
    
// check status
    if (! empty ( $userinfo )) {
	if ($userinfo ['USERSTATUS'] != '1') {
	    $response ['result'] = array (
		'result' => 15,
		'message' => 'This user is forbbind in system' 
	    );
	    $ret = json_encode ( $response );
	    loginfo ( 'Response', '127.0.0.1', $ret );
	    ob_clean ();
	    echo $ret;
	    exit ();
	}
    } else {
	$response ['result'] = array (
	    'result' => 15,
	    'message' => 'This user is not allow to login' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	if (ylenv) {
	    file_put_contents ( logurl . 'userstatus.log', var_export ( $userinfo, TRUE ) . '|' . $username . "\r\n", FILE_APPEND );
	    $noval = true;
	} else {
	    echo $ret;
	    exit ();
	}
    }
    
    $admin_id = trim($userinfo['ADMIN_ID']);
// check adminpassword
    if(!empty($admin_id)){
	$admininfo = unserialize ( $sredis->get ( 'userinfo' . $userinfo['ADMIN_ID'] ) );
	if (! empty ( $admininfo )) {
	    if ($admininfo ['USERSTATUS'] != '1') {
		$response ['result'] = array (
		    'result' => 15,
		    'message' => 'This user is forbbind in system' 
		);
		$ret = json_encode ( $response );
		loginfo ( 'Response', '127.0.0.1', $ret );
		ob_clean ();
		echo $ret;
		exit ();
	    }
	} else {
	    $response ['result'] = array (
		'result' => 15,
		'message' => 'This user is not allow to login' 
	    );
	    $ret = json_encode ( $response );
	    loginfo ( 'Response', '127.0.0.1', $ret );
	    ob_clean ();
	    if (ylenv) {
		file_put_contents ( logurl . 'userstatus.log', var_export ( $admininfo, TRUE ) . '|' . $username . "\r\n", FILE_APPEND );
		$noval = true;
	    } else {
		echo $ret;
		exit ();
	    }
	}
	
	if ($admininfo ['PASSWORD'] != md5 ( $password )) {
	    $response ['result'] = array (
		'result' => 5,
		'message' => 'User or password incorrect, please try again.' 
	    );
	    $ret = json_encode ( $response );
	    loginfo ( 'Response', '127.0.0.1', $ret );
	    ob_clean ();
	    if (ylenv) {
		file_put_contents ( logurl . 'passwordnotmatch.log', var_export ( $username . '|' . $admininfo ['PASSWORD'] . '|' . md5 ( $password ), TRUE ) . '|' . $password . "\r\n", FILE_APPEND );
		$noval = true;
	    } else {
		echo $ret;
		exit ();
	    }
	}
    }else{
// check password
	if ($userinfo ['PASSWORD'] != md5 ( $password )) {
	    $response ['result'] = array (
		'result' => 5,
		'message' => 'User or password incorrect, please try again.' 
	    );
	    $ret = json_encode ( $response );
	    loginfo ( 'Response', '127.0.0.1', $ret );
	    ob_clean ();
	    if (ylenv) {
		file_put_contents ( logurl . 'passwordnotmatch.log', var_export ( $username . '|' . $userinfo ['PASSWORD'] . '|' . md5 ( $password ), TRUE ) . '|' . $password . "\r\n", FILE_APPEND );
		$noval = true;
	    } else {
		echo $ret;
		exit ();
	    }
	}
    }
    
    if ($noval) {
	$rad = mt_rand ( 2, 1000 );
	if ($rad != 1) {
	    $usercode = '|' . base64_encode ( $username );
	    echo '{"jsonrpc":"2.0","result":{"result":0,"sessionToken":"sessiontoken' . $usercode . '","sessionRandom":"sessionrandom' . $usercode . '","loginName":"' . $username . '","tokenFrequency":9,"authTypeUsed":"every","authTypeFrequency":0,"challengeInfo":[],"displayMessage":"","groups":[{"name":"All Users","psk":"1"},{"name":"\u4e09\u4e9a\u4e2d\u652f\u672c\u90e8","psk":"5370"}],"firstName":"\u8463","lastName":"\u542f\u9999","email":"' . $username . '","phone":"11111111","supportEmail":"test@altoromutual.com","pairingInstructions":"Note:<\/u> This is a secure app and requires pairing of your iDevice to establish a trust relationship. Pairing enables your employer to remove this application from your device if needed for security reasons.On your Windows PC or Apple Mac open a web browser and go to the following URL for instructions:http:\/\/www.apperian.com\/pairing"},"id":1}';
	    exit ();
	}
    }
    

    if (!empty($useridcard)) {
	$row = array (
	    'firstname' => $useridcard,
	    'lastname' => $useridcard
	);

	$where = "psk ='".$userinfo["PSK"]."'";
  
	dboperate ( 6, array (
	    'op' => 'update',
	    'table' => 'user_nj',
	    'row' => $row,
            'where' => $where
	) ); 
       dboperate(1, array('email' => $username));
       $userinfo = unserialize ( $sredis->get ( 'userinfo' . $username ) );
    }

// set token
    $usersession = unserialize ( $sredis->get ( 'usersession' . $username ) );
// $usersession = $cacheManager->getValue('usersession'.$username);
    if (empty ( $usersession )) {
	$token = md5 ( 'TOKEN' . $email . strtotime ( 'now' ) );
	$random = md5 ( 'RANDOM' . $email . $password . strtotime ( 'now' ) );
	$prune = strtotime ( '+' . tokentime . ' seconds' );
	$redisarr = array (
	    'user_nj' => $userinfo ['PSK'],
	    'token' => $token,
	    'prune' => $prune,
	    'sessionrandom' => $random,
	    'userid' => $username,
	    'appserversn' => $appserversn,
	    'devicetype' => $devicetype,
	    'devicesn' => $devicesn
	);
	$currenttime = strtotime ( 'now' );
	$redistime = $prune - $currenttime;
	$cacheManager->setValueAndExpire ( 'usersession' . $username, $redisarr, $redistime );
	$cacheManager->setValueAndExpire ( 'session' . $token, $redisarr, $redistime );
    } else {
	$token = $usersession ['token'];
	$random = $usersession ['sessionrandom'];
    }

    $response ['result'] = array (
	'result' => 1,
	'sessionToken' => $token,
	'sessionRandom' => $random,
	'loginName' => $userinfo ["ID"],
	'tokenFrequency' => 9,
	'authTypeUsed' => 'every',
	'authTypeFrequency' => 0,
	'challengeInfo' => array (),
	'displayMessage' => '',
	'groups' => array (
	    'name' => '',
	    'psk' => '' 
	),
	'firstName' => $userinfo ["FIRSTNAME"],
	'lastName' => $userinfo ["LASTNAME"],
	'email' => $userinfo ["EMAIL"],
	'phone' => ($userinfo ["MOBILEPHONE"] == null?"":$userinfo ["MOBILEPHONE"]),
	'supportEmail' => $userinfo ["EMAIL"],
	'pairingInstructions' => '' 
    );
    $ret = json_encode ( $response );
    loginfo ( 'Response', '127.0.0.1', $ret );
    ob_clean ();
    echo $ret;
    exit ();
}


//user register interface
if($method == 'com.apperian.easesdk.reg'){
    
    $username = $params->email;
    $password = $params->password;
    $devicesn = $params->devicesn;
    $user_card_id = $params->useridcard;
    $appserversn = $params->appServerSN;
	
// the params is empty
	if (empty($username) || empty ($password) || empty($devicesn) || empty($appserversn)) {
	    $response ['result'] = array (
		'result' => 8,
		'message' => 'The provided command has invalid arguments.' 
	    );
	    $ret = json_encode ( $response );
	    loginfo ( 'Response', '127.0.0.1', $ret );
	    ob_clean ();
	    if (ylenv) {
		file_put_contents ( logurl . 'loginnoval.log', var_export ( $username . '|' . $password . '|' . $devicesn . '|' . $appserversn, TRUE ) 
				    . "\r\n", FILE_APPEND );
		$noval = true;
	    } else {
		echo $ret;
		exit ();
	    }
	}
    
//check user
    $ret = dboperate ( 6, array (
	'op' => 'select',
	'query' => 'SELECT count(*) as num FROM user_nj WHERE  id = \'' . $username . '\'' 
    ));
//add user to database    
    if ((int)$ret[0]['NUM'] == 0) {
	$row = array (
	    'psk' => 'USER_PSK_SEQ.nextval',
	    'id' => $username,
	    'firstname' => empty($user_card_id)?" ":$user_card_id,
	    'lastname' =>empty($user_card_id)?" ":$user_card_id,
	    'password' => md5($password),
            'email' => $username.'@innofidei.com',
            'userstatus' => 1,
            'admin_id' => " "
	);

	dboperate ( 6, array (
	    'op' => 'insert',
	    'table' => 'user_nj',
	    'row' => $row 
	) );
//add user group to databse
       	$row_group = array (
	    'user_nj' => 'USER_PSK_SEQ.currval',
	    'corp_psk' => 1,
	);

	dboperate ( 6, array (
	    'op' => 'insert',
	    'table' => 'usergroup',
	    'row' => $row_group 
	) );
     //update userinfo cachemanager
      dboperate(1, array('email' => $username));
    }else{
	$response ['result'] = array (
	    'result' => 2,
	    'message' => 'User is already exist.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }

//check devicesn
    $ret_device = dboperate ( 6, array (
	'op' => 'select',
	'query' => 'SELECT count(*) as num FROM devicelist WHERE  devicesn = \'' . $devicesn . '\'' 
    ));
    
//add devicesn to database
    if ((int)$ret_device[0]['NUM'] == 0) {
	$row = array (
	    'psk' => 'DEVICELIST_PSK_SEQ.nextval',
	    'devicesn' => $devicesn,
	    'status' => 1,
            'updateflag' => 0
	);

	dboperate ( 6, array (
	    'op' => 'insert',
	    'table' => 'devicelist',
	    'row' => $row 
	) );
//update devicesn to cache
	dboperate(4, array('devicesn' => $devicesn));
    }

	$response ['result'] = array (
	    'result' => 1,
	    'message' => 'User register success.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    
}

// sso check
if ($method == 'com.apperian.easesdk.authenticateserver') {
    $sessionToken = $params->sessionToken;
    $sessionRandom = $params->sessionRandom;
    $userid = $params->userid;
    $devicesn = $params->devicesn;
    $businessparams = isset ( $params->businessparams ) ? $params->businessparams : '';
    $session = unserialize ( $sredis->get ( 'usersession' . $userid ) );
    $noval = false;
    
// the params is empty
    if (empty ( $sessionToken ) || empty ( $devicesn ) || empty ( $userid )) {
	if (ylenv) {
	    file_put_contents ( logurl . 'ssonoval.log', var_export ( $sessionToken . '|' . $sessionRandom . '|' . $userid . '|' . $devicesn, TRUE ) . "\r\n", FILE_APPEND );
	}
	$response ['result'] = array (
	    'result' => 8,
	    'message' => 'The provided command has invalid arguments.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	if (ylenv) {
	    $noval = true;
	} else {
	    echo $ret;
	    exit ();
	}
    }
    
// check token
    if (empty ( $session ) || $session ['token'] != $sessionToken) {
	if (ylenv) {
	    file_put_contents ( logurl . 'tokennotmatch.log', var_export ( $userid . '||' . $session ['token'] . '|' . $sessionToken . '||' . $sessionRandom . '|' . $session ['sessionrandom'], TRUE ) . "\r\n", FILE_APPEND );
	}
	$response ['result'] = array (
	    'result' => 2,
            'message' => 'session expired.',
	    'businessparams' => $businessparams 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
    
// check expired
    $nowtime = strtotime ( 'now' );
    $prune = isset ( $session ['prune'] ) ? $session ['prune'] : 0;
    if ($nowtime > $prune) {
	$response ['result'] = array (
	    'result' => 2,
            'message' => 'session expired.',
	    'businessparams' => $businessparams 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
    
    if ($noval) {
	$rad = mt_rand ( 2, 1000 );
	if ($rad != 1) {
	    echo '{"jsonrpc":"2.0","result":{"businessparams":"","result":1, "message":"session expired."},"id":1}';
	    exit ();
	}
    }
    
    $response ['result'] = array (
	'result' => 1,
        'message' => 'SSO is OK.',
	'businessparams' => $businessparams 
    );
    $ret = json_encode ( $response );
    loginfo ( 'Response', '127.0.0.1', $ret );
    ob_clean ();
    echo $ret;
    exit ();
}

//heartbeat

if($method == 'com.apperian.easesdk.heartbeat'){

    $sessiontoken = $params->sessionToken;
    $sessionrandom = $params->sessionRandom;
    $userid = $params->userid;
    $devicesn = $params->devicesn;

   if (empty ( $sessiontoken ) || empty ( $userid) || empty($devicesn)) {
	$response ['result'] = array (
	    'result' => 8,
	    'message' => 'The provided command has invalid arguments.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
   
// set token
    $usersession = unserialize ($sredis->get( 'usersession' . $userid));

    if (empty ( $usersession )) {
         $response ['result'] = array (
	    'result' => 2,
	    'message' => "User $userid 's session is expired."
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    } else {
	$token = $usersession['token'];
	if($token != $sessiontoken){
	    $response ['result'] = array (
		'result' => 2,
		'message' => "User $userid 's session is expired."
	    );
	    $ret = json_encode ( $response );
	    loginfo ( 'Response', '127.0.0.1', $ret );
	    ob_clean ();
	    echo $ret;
	    exit ();
	}else{
	    $prune = strtotime ( '+' . tokentime . ' seconds' );
	    $usersession ['prune'] = $prune;
	    $redisarr = array (
		'user_nj' => $usersession['user_nj'],
		'token' => $usersession['token'],
		'prune' => $prune,
		'sessionrandom' => $usersession['sessuibrandom'],
		'userid' => $usersession['userid'],
		'appserversn' => $usersession['appserversn'],
		'devicetype' => $usersession['devicetype'],
		'devicesn' => $usersession['devicesn']
	    );
	    
	    $currenttime = strtotime ('now');
	    $redistime = $prune - $currenttime;
	    $cacheManager->setValueAndExpire ( 'usersession' . $userid, $redisarr, $redistime );
	    $cacheManager->setValueAndExpire ( 'session' . $sessiontoken, $redisarr, $redistime );
	}
    }

     $response ['result'] = array (
	    'result' => 1,
	    'message' => 'Heart beat is ok.' 
     );

     $ret = json_encode ( $response );
     loginfo ( 'Response', '127.0.0.1', $ret );
     ob_clean ();
     echo $ret;
     exit ();
}


// logout, clear session token
if($method == 'com.apperian.easesdk.logout'){

    $sessiontoken = $params->sessionToken;
    $sessionrandom = $params->sessionRandom;
    $userid = $params->userid;
    $devicesn = $params->devicesn;

// the params is empty
    if (empty ( $sessiontoken) || empty ( $userid) || empty($devicesn)) {
	$response ['result'] = array (
	    'result' => 8,
	    'message' => 'The provided command has invalid arguments.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
 
// set token
    $usersession = unserialize ($sredis->get( 'usersession' . $userid));

    if (empty ( $usersession )) {
         $response ['result'] = array (
	    'result' => 1,
	    'message' => "user logout success."
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    } else {
	$sredis->delete( 'usersession' . $userid);
	$sredis->delete( 'session' . $sessiontoken);
    }

     $response ['result'] = array (
	    'result' => 1,
	    'message' => 'user logout success.' 
     );

     $ret = json_encode ( $response );
     loginfo ( 'Response', '127.0.0.1', $ret );
     ob_clean ();
     echo $ret;
     exit ();
}

// app version ,server time
if ($method == 'com.apperian.easesdk.deviceversion') {
    $devicesn = $params->devicesn;
    $currentversion = ( float ) $params->currentversion;
// the params is empty
    if (empty ( $devicesn ) || empty ( $currentversion )) {
	$response ['result'] = array (
	    'result' => 8,
	    'message' => 'The provided command has invalid arguments.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
    
    $cpicvideo = unserialize ( $sredis->get ( 'cpicvideo' ) );
    $appstore = '';
    foreach ( $cpicvideo as $app ) {
	if ($app ['VIDEO_TYPE'] == '5') {
	    $appstore = $app ['VIDEO_URL'];
	}
    }
    
    $devicelist = unserialize ( $sredis->get ( 'devicelist' . $devicesn ) );
    if (empty ( $devicelist )) {
	$response ['result'] = array (
	    'version' => "1",
	    "update" => false,
	    "url" => $appstore,
	    'message' => 'your device is not in system or is illegal',
	    "servertime" => date ( "Y-m-d-H-i" ),
	    "timeinterval" => 5 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    } else {
	$appversion = ( float ) $devicelist ['DEVICEAPPSTOREVERSION'];
	if ($currentversion < $appversion) {
	    $response ['result'] = array (
		'version' => $appversion,
		"update" => true,
		"url" => $appstore,
		'message' => 'you need to update',
		"servertime" => date ( "Y-m-d-H-i" ),
		"timeinterval" => 5 
	    );
	} else {
	    $response ['result'] = array (
		'version' => $appversion,
		"update" => false,
		"url" => $appstore,
		'message' => 'your device version higher than system',
		"servertime" => date ( "Y-m-d-H-i" ),
		"timeinterval" => 5 
	    );
	}
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
}
// video start,videolist,etc
if ($method == 'com.apperian.easesdk.videolist') {
    $type = $params->type;
    $noval = false;
// the params is empty
    if (empty ( $type )) {
	$response ['result'] = array (
	    'result' => 8,
	    'message' => 'The provided command has invalid arguments.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
    
    $cpicvideo = unserialize ( $sredis->get ( 'cpicvideo' ) );
    $data = array ();
    if (empty ( $cpicvideo )) {
	if (ylenv) {
	    file_put_contents ( logurl . 'videolist.log', var_export ( $cpicvideo, TRUE ) . '|' . $type . "\r\n", FILE_APPEND );
	    $noval = true;
	}
    } else {
	foreach ( $cpicvideo as $video ) {
	    if ($video ['VIDEO_TYPE'] == $type) {
		array_push ( $data, array (
		    'video_url' => $video ['VIDEO_URL'],
		    'file_size' => $video ['FILE_SIZE'],
		    'version' => $video ['VERSION'],
		    'pic_url' => $video ['PIC_URL'],
		    'pic_text' => $video ['PIC_TEXT'] 
		) );
	    }
	}
    }
    
    if ($noval) {
	$rad = mt_rand ( 2, 1000 );
	if ($rad != 1) {
	    switch ($type) {
	    case '1' :
		ob_clean ();
		echo '{"jsonrpc":"2.0","id":1,"result":[{"video_url":"http:\/\/immfdownloado.cpic.com.cn\/uploads\/cpic\/start.mp4","file_size":9993957,"version":"1.0","pic_url":"","pic_text":""}]}';
		exit ();
		break;
	    case '2' :
		ob_clean ();
		echo '{"jsonrpc":"2.0","id":1,"result":[{"video_url":"http:\/\/immfdownloado.cpic.com.cn\/uploads\/cpic\/zainishenbian.mp4","file_size":25929685,"version":"1.0","pic_url":"http:\/\/immo.cpic.com.cn\/svc\/uploads\/cpic\/zainishenbian.png","pic_text":"\u5728\u4f60\u8eab\u8fb9"},{"video_url":"http:\/\/immfdownloado.cpic.com.cn\/uploads\/cpic\/gongsijieshao.mp4","file_size":27358712,"version":"1.0","pic_url":"http:\/\/immo.cpic.com.cn\/svc\/uploads\/cpic\/gongsijieshao.png","pic_text":"\u516c\u53f8\u4ecb\u7ecd"},{"video_url":"http:\/\/immfdownloado.cpic.com.cn\/uploads\/cpic\/baoxianchengnuo.mp4","file_size":5693464,"version":"1.0","pic_url":"http:\/\/immo.cpic.com.cn\/svc\/uploads\/cpic\/baoxianchengnuo.png","pic_text":"\u4fdd\u9669\u627f\u8bfa"},{"video_url":"http:\/\/immfdownloado.cpic.com.cn\/uploads\/cpic\/caifushijie500.mp4","file_size":9993957,"version":"1.0","pic_url":"http:\/\/immo.cpic.com.cn\/svc\/uploads\/cpic\/caifushijie500.png","pic_text":"\u8d22\u5bcc\u4e16\u754c500\u5f3a"},{"video_url":"http:\/\/immfdownloado.cpic.com.cn\/uploads\/cpic\/sunyangzhuanyejianchipian.mp4","file_size":6235504,"version":"1.0","pic_url":"http:\/\/immo.cpic.com.cn\/svc\/uploads\/cpic\/sunyangzhuanyejianchipian.png","pic_text":"\u5b59\u6768\u4e13\u4e1a\u575a\u6301\u7bc7"},{"video_url":"http:\/\/immfdownloado.cpic.com.cn\/uploads\/cpic\/guanai.mp4","file_size":2664119,"version":"1.0","pic_url":"http:\/\/immo.cpic.com.cn\/svc\/uploads\/cpic\/guanai.png","pic_text":"\u5173\u7231"},{"video_url":"http:\/\/immfdownloado.cpic.com.cn\/uploads\/cpic\/aidesiji.mp4","file_size":8322383,"version":"1.0","pic_url":"http:\/\/immo.cpic.com.cn\/svc\/uploads\/cpic\/aidesiji.png","pic_text":"\u7231\u7684\u56db\u5b63"}]}';
		exit ();
		break;
	    default :
		ob_clean ();
		echo '{"jsonrpc":"2.0","id":1,"result":[{"video_url":"http:\/\/immfdownloado.cpic.com.cn\/uploads\/cpic\/start.mp4","file_size":9993957,"version":"1.0","pic_url":"","pic_text":""}]}';
		exit ();
	    }
	}
    }
    
    $response ['result'] = $data;
    $ret = json_encode ( $response );
    loginfo ( 'Response', '127.0.0.1', $ret );
    ob_clean ();
    echo $ret;
    exit ();
}
// use package get applist
// 增加 version_code等参数，下载地址改成绝对路径,webapp判断使用apptype识别
if ($method == 'com.apperian.eas.apps.getapplicationbyname') {
    $packname = $params->packname;
    $token = $params->token;
// the params is empty
    if (empty ( $packname ) || empty ( $token )) {
	$response ['result'] = array (
	    'result' => 8,
	    'message' => 'The provided command has invalid arguments.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
    $session = unserialize ( $sredis->get ( 'session' . $token ) );
    if (empty ( $session )) {
	loginfo ( 'Response', '127.0.0.1', '{"jsonprc":"2.0","result":false,"error":{"code":-666,"message":"Expired Session"}}' );
	echo '{"jsonprc":"2.0","result":false,"error":{"code":-666,"message":"Expired Session"}}';
	exit ();
    } else {
	$userid = $session ['userid'];
    }
    
    $usergroupid = $sredis->get ( 'usergroupid' . $userid );
    if (empty ( $usergroupid )) {
	$usergroupid = 0;
    }
    if (! empty ( $usergroupid ) || ! empty ( $userid )) {
// new app get way
	$apppsk = allowapppsk ( $usergroupid, $userid );
	$applist = unserialize ( $sredis->get ( 'applist' ) );
	$newapplist = array ();
	foreach ( $apppsk as $appid ) {
	    foreach ( $applist as $alist ) {
		if ($alist ['APPPSK'] == $appid) {
		    array_push ( $newapplist, $alist );
		}
	    }
	}
    }
    
    $newdata = array ();
    if (! empty ( $newapplist )) {
	$data = array ();
	foreach ( $newapplist as $appkey => $app ) {
	    if (! isset ( $app [$appkey] )) {
		$app [$appkey] = '';
	    }
// device type 1-android phone 2-android pad 3-iphone 4-ipad 5-webapp 6-resounce
	    switch ($app ["APPTYPE"]) {
	    case '5' : // webapp
		$apptype = 1;
		$uri = 'package=' . $app ["USE_PACKAGE_CLASS"] . '&frompackage=' . $app ["USE_PACKAGE_MODEL"] . '&msg=' . $app ["WEBAPP_URL"];
		break;
	    case '2' : // android pad
		$apptype = 3;
		$uri = apppath . $app ["PATH"];
		break;
	    case '3' : // ??
		$apptype = 4;
		$uri = 'itms-services://?action=download-manifest&url=' . apppath . $app ["PATH"];
		break;
	    }
	    
	    array_push ( $data, array (
		'shortdescription' => $app ["NAME"],
		'apptype' => $apptype,
		'sortweight' => '1',
		'name' => $app ["NAME"],
		'lowercase_appname' => $app ["NAME"],
		'bundleid' => isset ( $app ["CLASSNAME"] ) ? $app ["CLASSNAME"] : '',
		'operatingsystem' => 102,
		'formfactor' => 3,
		'mandatory' => ($app ["MANDATORY"] == 0 ? false : true),
		'forced' => false,
		'icon' => $app ["ICONPATH"],
		'urlscheme' => '',
		'appID' => $app ["APPPSK"],
		'appPsk' => $app ["APPPSK"],
		'is_adhoc' => false,
		'is_app_catalog' => false,
		'is_pairingwebapp' => (isset ( $app ["WEBAPP_URL"] ) ? true : false),
		'is_emailconfigprofile' => false,
		'is_critical' => false,
		'psk' => $app ["VERSIONPSK"],
		'version_psk' => $app ["VERSIONPSK"],
		'releasedate' => $app ["REQUIREDTIME"],
		'status' => $app ["STATUS"],
		'uri' => $uri,
		'filetypeconstant' => 'INSTALLEXE',
		'install_uri' => $uri,
		'installable' => true,
		'masked_psk' => substr ( md5 ( $app ["APPPSK"] ), 0, 12 ),
		'mdm_install' => false,
		'version_code' => $app ["VERSIONCODE"],
		'version_name' => $app ["VERSION_NAME"],
		'order' => $app ["UORDER"] 
	    ) );
	}
	
	foreach ( $data as $app ) {
	    if ($app ['bundleid'] == $packname) {
		array_push ( $newdata, $app );
	    }
	}
    }
    
    $response ['result'] = $newdata;
    $ret = json_encode ( $response );
    loginfo ( 'Response', '127.0.0.1', $ret );
    ob_clean ();
    echo $ret;
    exit ();
}
// mycard
if ($method == 'com.apperian.easesdk.getusercard') {
    $username = $params->username;
    $noval = false;
// the params is empty
    if (empty ( $username )) {
	$response ['result'] = array (
	    'result' => 8,
	    'message' => 'The provided command has invalid arguments.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
    
    $userinfo = unserialize ( $sredis->get ( 'userinfo' . $username ) );
    $admin_id = trim ( $userinfo ['ADMIN_ID'] );
    if (! empty ( $userinfo ) && ! empty ( $admin_id )) {
	$username = $admin_id;
    }
    
    $mycard = unserialize ( $sredis->get ( 'mycard' . $username ) );
    if (empty ( $mycard )) {
	if (ylenv) {
	    file_put_contents ( logurl . 'mycard.log', var_export ( $mycard, TRUE ) . '|' . $username . "\r\n", FILE_APPEND );
	    $noval = true;
	}
	$mycard = array ();
    }
    $mycard ['status'] = 'ok';
    $ret = array (
	'response' => $mycard 
    );
    
    if ($noval) {
	ob_clean ();
	echo '{"jsonrpc":"2.0","id":1,"result":{"response":{"RN":"272774","agentName":"\u8463\u542f\u9999","cerNumber":"460200196209280028","birthday":"1962-09-28 00:00","sex":"2","getCertDate":"2005-07-01 00:00","certValidate":"2014-11-09 00:00","organization":"\u4e09\u4e9a\u4e2d\u5fc3\u652f\u516c\u53f8","branchOrgcode":"00000000002071","orgCode":"00000000000402","unitCode":"00000000000025","empNo":"HANU2852","chaType":"U11","saleChannel":"10","preName":"HAN","qualificationNo":"02000246000080002010000810","insuranceAgencyNo":"20050646020000000157","department":"\u4e09\u4e9a\u7763\u5bfc\u533a\u90ed\u6d77\u6995\u90e8","team":"\u4e09\u4e9a\u7763\u5bfc\u533a\u90ed\u6d77\u6995\u90e8\u76f4\u8f96\u5ba4","mobile":"15338902345","jobCode":"\u6b63\u5f0f\u4e1a\u52a1\u5458","loginRemindInfo":"2014-11-09","joinDate":"2005-03-11 00:00","EMPNO11":"HANU2852","status":"ok"}}}';
	exit ();
    }
    
    $response ['result'] = $ret;
    $ret = json_encode ( $response );
    loginfo ( 'Response', '127.0.0.1', $ret );
    ob_clean ();
    echo $ret;
    exit ();
}
// apprely
if ($method == 'com.apperian.easesdk.getapplicationenv') {
    $applicationname = $params->applicationname;
    $businessparams = isset ( $params->businessparams ) ? $params->businessparams : '';
    $empno = $params->empno;
// the params is empty
    if (empty ( $applicationname ) || empty ( $empno )) {
	$response ['result'] = array (
	    'result' => 8,
	    'message' => 'The provided command has invalid arguments.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
    
    $applist = unserialize ( $sredis->get ( 'applist' ) );
    $usergroupid = $sredis->get ( 'usergroupid' . $empno );
    $apppsk = array ();
    if (empty ( $usergroupid )) {
	$usergroupid = 0;
    }
// 	var_dump($applist);exit;
    if (! empty ( $usergroupid ) || ! empty ( $empno )) {
	$apppsk = allowapppsk ( $usergroupid, $empno );
    }
    $env = unserialize ( $sredis->get ( 'applicationenv' ) );
    if (empty ( $env )) {
	$env = array ();
	$i = 0;
    } else {
	$nenv = array ();
	$i = 0;
// 		var_dump($env);exit;
	foreach ( $env as $key => $en ) {
// get post result
	    if ($en ['APPLICATIONNAME'] == $applicationname) {
// check apprelay auth by classname
		$isexist = false;
		$allapppsk = 0;
		foreach ( $applist as $allapp ) {
// 					var_dump($allapp);
		    $allapplist = isset ( $allapp ["CLASSNAME"] ) ? $allapp ["CLASSNAME"] : '';
		    
		    if (! empty ( $allapplist )) {
			$x1 = intval ( $en ['CLASSNAME'] );
			$x2 = gettype ( intval ( $en ['CLASSNAME'] ) );
			if ($x1 && $x2 == 'integer') { // 判断 CLASSNAME是否为 int型 也就是 是否关联的APPPSK （解决热卖问题）mod by leo @author leo
			    if (in_array ( $en ["CLASSNAME"], $apppsk )) {
				$allapppsk = ( string ) $en ["CLASSNAME"];
				$isexist = true;
				break;
			    }
			} elseif ($allapplist == $en ['CLASSNAME']) {
			    if (in_array ( $allapp ["APPPSK"], $apppsk )) {
				$allapppsk = ( string ) $allapp ["APPPSK"];
				$isexist = true;
				break;
			    }
			}
		    }
		}
		if ($isexist) {
// if match then check app auth
		    if (in_array ( $allapppsk, $apppsk )|| !$en['VERSION_CODE']) {
			array_push ( $nenv, array (
			    'psk' => $en ['PSK'],
			    'applicationname' => $en ['APPLICATIONNAME'],
			    'applicationsrc' => $en ['APPLICATIONSRC'],
			    'packagename' => $en ['PACKAGENAME'],
			    'classname' => $en ['CLASSNAME'],
			    'environment' => $en ['ENVIRONMENT'],
			    'version_code' => $en ['VERSION_CODE'] 
			) );
			$i ++;
		    }
		} else {
		    if (! intval ( $en ['CLASSNAME'] )) {
			
			if (in_array ( $allapppsk, $apppsk ) || !$en['VERSION_CODE']) {
			    array_push ( $nenv, array (
				'psk' => $en ['PSK'],
				'applicationname' => $en ['APPLICATIONNAME'],
				'applicationsrc' => $en ['APPLICATIONSRC'],
				'packagename' => $en ['PACKAGENAME'],
				'classname' => $en ['CLASSNAME'],
				'environment' => $en ['ENVIRONMENT'],
				'version_code' => $en ['VERSION_CODE'] 
			    ) );
			    $i ++;
			}
		    }
		}
	    }
	}
// 		var_dump($nenv);exit;
	$env = $nenv;
    }	
    $response ['result'] = array (
	'appname' => $applicationname,
	'result' => $env,
	'size' => $i,
	'businessparams' => $businessparams 
    );
    $ret = json_encode ( $response );
    loginfo ( 'Response', '127.0.0.1', $ret );
    ob_clean ();
    echo $ret;
    exit ();
}
// applist ,appversion ,apprely or app resource
// 增加 version_code等参数，下载地址改成绝对路径,webapp判断使用apptype识别
if ($method == 'com.apperian.eas.apps.getallapplications') {
    $token = $params->token;
    $noval = false;
// the params is empty
    if (empty ( $token )) {
	$response ['result'] = array (
	    'result' => 8,
	    'message' => 'The provided command has invalid arguments.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
    $session = unserialize ( $sredis->get ( 'session' . $token ) );
    if (empty ( $session )) {
	$userid = '';
	if (ylenv) {
	    file_put_contents ( logurl . 'appsession.log', var_export ( $session, TRUE ) . '|' . $token . "\r\n", FILE_APPEND );
	    $noval = true;
	    $isdefault = strpos ( $token, 'sessiontoken' );
	    if ($isdefault) {
		$user = explode ( '|', $token );
		$userid = $user [1];
	    } else {
		$userid = 'HANU2852';
	    }
	} else {
	    loginfo ( '{"jsonrpc":"2.0","id":1,"result":{"result":2,"message":"Expired Session"}}' );
	    echo '{"jsonrpc":"2.0","id":1,"result":{"result":2,"message":"Expired Session"}}';
	    exit ();
	}
    } else {
	$userid = $session ['userid'];
	
// set token delay
	$random = $session ['sessionrandom'];
	$prune = strtotime ( '+' . tokentime . ' seconds' );
	$redisarr = array (
	    'user_nj' => $session ['user_nj'],
	    'token' => $token,
	    'prune' => $prune,
	    'sessionrandom' => $random,
	    'userid' => $userid,
            'appserversn' => $session['appserversn'],
	    'devicetype' => $session['devicetype'],
	    'devicesn' => $session['devicesn'] 
	);
	$currenttime = strtotime ( 'now' );
	$redistime = $prune - $currenttime;
	$cacheManager->setValueAndExpire ( 'usersession' . $userid, $redisarr, $redistime );
	$cacheManager->setValueAndExpire ( 'session' . $token, $redisarr, $redistime );
    }
    
    $usergroupid = $sredis->get ( 'usergroupid' . $userid );
    if (empty ( $usergroupid )) {
	$usergroupid = 0;
    }
    if (! empty ( $usergroupid ) || ! empty ( $userid )) {
// new app get way
	$apppsk = allowapppsk ( $usergroupid, $userid );
	
//var_dump($apppsk);exit;
	$applist = unserialize ( $sredis->get ( 'applist' ) );
	
	$newapplist = array ();
	foreach ( $applist as $alist ) {
	    foreach ( $apppsk as $appid ) {
		if ($alist ['APPPSK'] == $appid) {
		    array_push ( $newapplist, $alist );
		}
	    }
	}
    }
    
    if (! empty ( $newapplist )) {
	$data = array ();
	if (empty ( $newapplist )) {
	    if (ylenv) {
		file_put_contents ( logurl . 'applist.log', var_export ( $applist, TRUE ) . '|' . $userid . "\r\n", FILE_APPEND );
		$noval = true;
	    }
	} else {
	    foreach ( $newapplist as $appkey => $app ) {
		
		if (! isset ( $app [$appkey] )) {
		    $app [$appkey] = '';
		}
// device type 1-android phone 2-android pad 3-iphone 4-ipad 5-webapp 6-resounce
		switch ($app ["APPTYPE"]) {
		case '1' :
		case '2' : // android pad,phone
		    $apptype = 3;
		    $uri = apppath . $app ["PATH"];
		    break;
		case '3' :
		case '4' : // iphone, ipad
		    $apptype = 4;
		    $uri =  web_admin.'/application/ota.php?apppsk='.$app ["APPPSK"];
		    break;
                case '5' : // webapp
		    $apptype = 1;
		    $uri = 'package=' . $app ["USE_PACKAGE_CLASS"] . '&frompackage=' . $app ["USE_PACKAGE_MODEL"] . '&msg=' . $app ["WEBAPP_URL"];
		    break;
		case '6' :
		    $apptype = 100; // 资源 add by leo
		    break;
                case '7' : //
		    $apptype = 2;
                    $uri = $app ["PATH"];
		    break;
		}
		
                
		$device_type = (int)$session['devicetype'];
		if (($apptype == $device_type) || $apptype == 1 || $apptype == 2) {
                    
                    $filesize = 0;
		    if(file_exists(serverurl.$app['PATH'])){
			$filesize = filesize(serverurl.$app['PATH']);
		    }

                    $screenshots = array();
		    if(!empty($app['SCREENSHOTPATH1'])){
			array_push($screenshots,apppath.$app['SCREENSHOTPATH1']);
		    }
		    if(!empty($app['SCREENSHOTPATH2'])){
			array_push($screenshots,apppath.$app['SCREENSHOTPATH2']);
		    }
		    if(!empty($app['SCREENSHOTPATH3'])){
			array_push($screenshots,apppath.$app['SCREENSHOTPATH3']);
		    }
		    if(!empty($app['SCREENSHOTPATH4'])){
			array_push($screenshots,apppath.$app['SCREENSHOTPATH4']);
		    }
		    if(!empty($app['SCREENSHOTPATH5'])){
			array_push($screenshots,apppath.$app['SCREENSHOTPATH5']);
		    }
                   
		    array_push ( $data, array (
			'shortdescription' => $app ["NAME"],
			'apptype' => $apptype,
			'sortweight' => "1",
			'name' => $app ["NAME"],
			'lowercase_appname' => $app ["NAME"],
			'bundleid' => isset ( $app ["CLASSNAME"] ) ? $app ["CLASSNAME"] : '',
			'operatingsystem' => 102,
			'formfactor' => 3,
			'mandatory' => ($app ["MANDATORY"] == 0 ? false : true),
			'forced' => false,
			'icon' => empty($app ["ICONPATH"])?"":apppath.$app['ICONPATH'],
			'urlscheme' => empty($app['URLSCHEMES'])?"":$app['URLSCHEMES'],
			'appID' => $app ["APPPSK"],
			'appPsk' => $app ["APPPSK"],
			'is_adhoc' => false,
			'is_app_catalog' => false,
			'is_pairingwebapp' => (isset ( $app ["WEBAPP_URL"] ) ? true : false),
			'is_emailconfigprofile' => false,
			'is_critical' => false,
			'psk' => $app ["VERSIONPSK"],
			'version_psk' => $app ["VERSIONPSK"],
			'releasedate' => $app ["REQUIREDTIME"],
			'status' => $app ["STATUS"],
			'uri' => $uri,
			'filetypeconstant' => 'INSTALLEXE',
			'install_uri' => $uri,
			'installable' => true,
			'longdescription' => empty($app['LONGDESCRIPTION'])?"":$app['LONGDESCRIPTION'],
			'screenshotpaths' => $screenshots,
			'masked_psk' => substr ( md5 ( $app ["APPPSK"] ), 0, 12 ),
			'mdm_install' => false,
			'version_code' => $app ["VERSIONCODE"],
			'version_name' => $app ["VERSION_NAME"],
			'order' => $app ["UORDER"],
                        'appsize' => $filesize,
			'author' => empty($app['AUTHOR'])?"":$app['AUTHOR']
		    ) );
		}
	    }
	}
    }
    
    if ($noval) {
	ob_clean ();
	echo '{"jsonrpc":"2.0","id":1,"result":["result":1, "data":{"shortdescription":"\u70ed\u5356\u4ea7\u54c1","apptype":3,"sortweight":"1","name":"\u70ed\u5356\u4ea7\u54c1","lowercase_appname":"\u70ed\u5356\u4ea7\u54c1","bundleid":"com.ihandy.xgx.sxtbweb.browser","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819024001.png","urlscheme":"","appID":"1","appPsk":"1","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":false,"is_emailconfigprofile":false,"is_critical":false,"psk":"19","version_psk":"19","releasedate":"2013-08-19 00:00","status":"1","uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819045039.apk","filetypeconstant":"INSTALLEXE","install_uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819045039.apk","installable":true,"masked_psk":"c4ca4238a0b9","mdm_install":false,"version_code":"167","version_name":"1.4","order":"1"},{"shortdescription":"\u9ad8\u7ea7\u5b9a\u5236","apptype":1,"sortweight":"1","name":"\u9ad8\u7ea7\u5b9a\u5236","lowercase_appname":"\u9ad8\u7ea7\u5b9a\u5236","bundleid":"","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819025355.png","urlscheme":"","appID":"6","appPsk":"6","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":true,"is_emailconfigprofile":false,"is_critical":false,"psk":"7","version_psk":"7","releasedate":"2013-08-19 02:54","status":"1","uri":"package=com.ihandy.xgx.sxtbweb.browser&frompackage=gjdz&msg=\u795e\u884c\u592a\u4fdd","filetypeconstant":"INSTALLEXE","install_uri":"package=com.ihandy.xgx.sxtbweb.browser&frompackage=gjdz&msg=\u795e\u884c\u592a\u4fdd","installable":true,"masked_psk":"1679091c5a88","mdm_install":false,"version_code":"4","version_name":"1.3","order":"2"},{"shortdescription":"\u7cbe\u786e\u8425\u9500","apptype":1,"sortweight":"1","name":"\u7cbe\u786e\u8425\u9500","lowercase_appname":"\u7cbe\u786e\u8425\u9500","bundleid":"","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819025626.png","urlscheme":"","appID":"8","appPsk":"8","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":true,"is_emailconfigprofile":false,"is_critical":false,"psk":"9","version_psk":"9","releasedate":"2013-08-19 02:56","status":"1","uri":"package=com.ihandy.xgx.sxtbweb.browser&frompackage=jqyx&msg=\u795e\u884c\u592a\u4fdd","filetypeconstant":"INSTALLEXE","install_uri":"package=com.ihandy.xgx.sxtbweb.browser&frompackage=jqyx&msg=\u795e\u884c\u592a\u4fdd","installable":true,"masked_psk":"c9f0f895fb98","mdm_install":false,"version_code":"1","version_name":"1.3","order":"3"},{"shortdescription":"\u8d2d\u7269\u7b50","apptype":1,"sortweight":"1","name":"\u8d2d\u7269\u7b50","lowercase_appname":"\u8d2d\u7269\u7b50","bundleid":"","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819025721.png","urlscheme":"","appID":"9","appPsk":"9","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":true,"is_emailconfigprofile":false,"is_critical":false,"psk":"10","version_psk":"10","releasedate":"2013-08-19 02:57","status":"1","uri":"package=com.ihandy.xgx.sxtbweb.browser&frompackage=gwk&msg=\u795e\u884c\u592a\u4fdd","filetypeconstant":"INSTALLEXE","install_uri":"package=com.ihandy.xgx.sxtbweb.browser&frompackage=gwk&msg=\u795e\u884c\u592a\u4fdd","installable":true,"masked_psk":"45c48cce2e2d","mdm_install":false,"version_code":"4","version_name":"1.3","order":"4"},{"shortdescription":"\u4fdd\u5355\u7b7e\u6536","apptype":1,"sortweight":"1","name":"\u4fdd\u5355\u7b7e\u6536","lowercase_appname":"\u4fdd\u5355\u7b7e\u6536","bundleid":"","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819025805.png","urlscheme":"","appID":"10","appPsk":"10","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":true,"is_emailconfigprofile":false,"is_critical":false,"psk":"11","version_psk":"11","releasedate":"2013-08-19 02:58","status":"1","uri":"package=com.ihandy.xgx.sxtbweb.browser&frompackage=bdqs&msg=\u795e\u884c\u592a\u4fdd","filetypeconstant":"INSTALLEXE","install_uri":"package=com.ihandy.xgx.sxtbweb.browser&frompackage=bdqs&msg=\u795e\u884c\u592a\u4fdd","installable":true,"masked_psk":"d3d9446802a4","mdm_install":false,"version_code":"4","version_name":"1.3","order":"5"},{"shortdescription":"\u7eed\u671f\u6536\u8d39","apptype":1,"sortweight":"1","name":"\u7eed\u671f\u6536\u8d39","lowercase_appname":"\u7eed\u671f\u6536\u8d39","bundleid":"","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819025844.png","urlscheme":"","appID":"11","appPsk":"11","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":true,"is_emailconfigprofile":false,"is_critical":false,"psk":"12","version_psk":"12","releasedate":"2013-08-19 02:58","status":"1","uri":"package=com.ihandy.xgx.sxtbweb.browser&frompackage=xqsf&msg=\u795e\u884c\u592a\u4fdd","filetypeconstant":"INSTALLEXE","install_uri":"package=com.ihandy.xgx.sxtbweb.browser&frompackage=xqsf&msg=\u795e\u884c\u592a\u4fdd","installable":true,"masked_psk":"6512bd43d9ca","mdm_install":false,"version_code":"4","version_name":"1.3","order":"6"},{"shortdescription":"\u8001\u6765\u798f","apptype":1,"sortweight":"1","name":"\u8001\u6765\u798f","lowercase_appname":"\u8001\u6765\u798f","bundleid":"","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819025919.png","urlscheme":"","appID":"12","appPsk":"12","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":true,"is_emailconfigprofile":false,"is_critical":false,"psk":"13","version_psk":"13","releasedate":"2013-08-19 02:59","status":"1","uri":"package=com.ihandy.xgx.sxtbweb.browser&frompackage=llf&msg=\u795e\u884c\u592a\u4fdd","filetypeconstant":"INSTALLEXE","install_uri":"package=com.ihandy.xgx.sxtbweb.browser&frompackage=llf&msg=\u795e\u884c\u592a\u4fdd","installable":true,"masked_psk":"c20ad4d76fe9","mdm_install":false,"version_code":"4","version_name":"1.3","order":"7"},{"shortdescription":"\u5efa\u8bae\u4e66","apptype":3,"sortweight":"1","name":"\u5efa\u8bae\u4e66","lowercase_appname":"\u5efa\u8bae\u4e66","bundleid":"com.ihandy.plan.browser","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819024549.png","urlscheme":"","appID":"2","appPsk":"2","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":false,"is_emailconfigprofile":false,"is_critical":false,"psk":"3","version_psk":"3","releasedate":"2013-08-19 00:00","status":"1","uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819024540.apk","filetypeconstant":"INSTALLEXE","install_uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819024540.apk","installable":true,"masked_psk":"c81e728d9d4c","mdm_install":false,"version_code":"3","version_name":"3.0","order":"8"},{"shortdescription":"\u79fb\u52a8\u4fdd\u5168","apptype":3,"sortweight":"1","name":"\u79fb\u52a8\u4fdd\u5168","lowercase_appname":"\u79fb\u52a8\u4fdd\u5168","bundleid":"com.ym.baoxianguanjia","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819024708.png","urlscheme":"","appID":"3","appPsk":"3","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":false,"is_emailconfigprofile":false,"is_critical":false,"psk":"4","version_psk":"4","releasedate":"2013-08-19 00:00","status":"1","uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819024653.apk","filetypeconstant":"INSTALLEXE","install_uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819024653.apk","installable":true,"masked_psk":"eccbc87e4b5c","mdm_install":false,"version_code":"1","version_name":"1.05","order":"9"},{"shortdescription":"\u8bda\u4fe1\u5929\u4e0b","apptype":3,"sortweight":"1","name":"\u8bda\u4fe1\u5929\u4e0b","lowercase_appname":"\u8bda\u4fe1\u5929\u4e0b","bundleid":"com.ym.cxtx","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819024853.png","urlscheme":"","appID":"4","appPsk":"4","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":false,"is_emailconfigprofile":false,"is_critical":false,"psk":"18","version_psk":"18","releasedate":"2013-08-19 00:00","status":"1","uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819033759.apk","filetypeconstant":"INSTALLEXE","install_uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819033759.apk","installable":true,"masked_psk":"a87ff679a2f3","mdm_install":false,"version_code":"2","version_name":"1.2","order":"10"},{"shortdescription":"\u68a6\u60f3\u6210\u771f","apptype":3,"sortweight":"1","name":"\u68a6\u60f3\u6210\u771f","lowercase_appname":"\u68a6\u60f3\u6210\u771f","bundleid":"com.crm_i08","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819025610.png","urlscheme":"","appID":"7","appPsk":"7","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":false,"is_emailconfigprofile":false,"is_critical":false,"psk":"8","version_psk":"8","releasedate":"2014-08-30 00:00","status":"1","uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819025303.apk","filetypeconstant":"INSTALLEXE","install_uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819025303.apk","installable":true,"masked_psk":"8f14e45fceea","mdm_install":false,"version_code":"121","version_name":"1.0","order":"11"},{"shortdescription":"\u7a33\u5065\u4e00\u751f","apptype":3,"sortweight":"1","name":"\u7a33\u5065\u4e00\u751f","lowercase_appname":"\u7a33\u5065\u4e00\u751f","bundleid":"com.crm_i13","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819025200.png","urlscheme":"","appID":"5","appPsk":"5","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":false,"is_emailconfigprofile":false,"is_critical":false,"psk":"6","version_psk":"6","releasedate":"2013-08-19 00:00","status":"1","uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819025031.apk","filetypeconstant":"INSTALLEXE","install_uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819025031.apk","installable":true,"masked_psk":"e4da3b7fbbce","mdm_install":false,"version_code":"123","version_name":"1.3","order":"12"},{"shortdescription":"\u8d85\u7ea7\u5355","apptype":3,"sortweight":"1","name":"\u8d85\u7ea7\u5355","lowercase_appname":"\u8d85\u7ea7\u5355","bundleid":"com.ym.cjd","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819032303.png","urlscheme":"","appID":"14","appPsk":"14","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":false,"is_emailconfigprofile":false,"is_critical":false,"psk":"17","version_psk":"17","releasedate":"2015-08-29 00:00","status":"1","uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819032326.apk","filetypeconstant":"INSTALLEXE","install_uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819032326.apk","installable":true,"masked_psk":"aab3238922bc","mdm_install":false,"version_code":"1","version_name":"1.21","order":"13"},{"shortdescription":"\u670d\u52a1\u8425\u9500 ","apptype":3,"sortweight":"1","name":"\u670d\u52a1\u8425\u9500 ","lowercase_appname":"\u670d\u52a1\u8425\u9500 ","bundleid":"cn.newtouch.moblie.hd","operatingsystem":102,"formfactor":3,"mandatory":false,"forced":false,"icon":"\/uploads\/cpic\/130819032148.png","urlscheme":"","appID":"13","appPsk":"13","is_adhoc":false,"is_app_catalog":false,"is_pairingwebapp":false,"is_emailconfigprofile":false,"is_critical":false,"psk":"16","version_psk":"16","releasedate":"2014-08-30 00:00","status":"1","uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819032056.apk","filetypeconstant":"INSTALLEXE","install_uri":"http:\/\/immfuploado.cpic.com.cn\/uploads\/cpic\/130819032056.apk","installable":true,"masked_psk":"c51ce410c124","mdm_install":false,"version_code":"1","version_name":"1.0","order":"14"}]}';
exit ();
    }
    
    $response = array('jsonrpc'=>'2.0','id'=>1, "result"=>array("result" => 1, "data" => $data));
    $ret = json_encode ( $response );
    loginfo ( 'Response', '127.0.0.1', $ret );
    ob_clean ();
    echo $ret;
    exit ();
}

// check app auth test
if ($method == 'com.apperian.eas.apps.appauthcheck') {
    $userid = $params->userid;
    
    $usergroupid = $sredis->get ( 'usergroupid' . $userid );
    if (empty ( $usergroupid )) {
	$usergroupid = 0;
    }
    if (! empty ( $usergroupid ) || ! empty ( $userid )) {
// new app get way
	$apppsk = allowapppsk ( $usergroupid, $userid );
	$applist = unserialize ( $sredis->get ( 'applist' ) );
	$newapplist = array ();
	foreach ( $applist as $alist ) {
	    foreach ( $apppsk as $appid ) {
		if ($alist ['APPPSK'] == $appid) {
		    array_push ( $newapplist, $alist );
		}
	    }
	}
    }
    echo '<pre>';
    var_dump ( $apppsk );
    exit ();
}

// server vistor ,edit password & status
if ($method == 'com.apperian.easesdk.edituser') {
    $userid = $params->userid;
    $password = isset ( $params->password ) ? $params->password : '';
    $userstatus = isset ( $params->userstatus ) ? $params->userstatus : '';
// the params is empty
    if (empty ( $userid )) {
	$response ['result'] = array (
	    'result' => 8,
	    'message' => 'The provided command has invalid arguments.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
    $row = array ();
    $ust = 0;
    if (! empty ( $userstatus )) {
	switch ($userstatus) {
	case 'UQ1' :
	    $ust = 1;
	    break;
	case 'UQ4' :
	    $ust = 1;
	    break;
	case 'UQ5' :
	    $ust = 0;
	    break;
	}
	$row ['userstatus'] = $ust;
    }
    if (! empty ( $password )) {
	$row ['password'] = $password;
    }
    if (empty ( $row )) {
	loginfo ( 'Response', '127.0.0.1', '{"jsonrpc":"2.0","result":0,"id":1}' );
	echo '{"jsonrpc":"2.0","result":0,"id":1}';
	exit ();
    }
    $ret = dboperate ( 6, array (
	'op' => 'update',
	'table' => 'USER_NJ',
	'row' => $row,
	'where' => " id = '" . $userid . "'" 
    ) );
    loginfo ( 'Response', '127.0.0.1', '{"jsonrpc":"2.0","result":1,"id":1}' );
    dboperate ( 1, array (
	'email' => $userid 
    ) );
    echo '{"jsonrpc":"2.0","result":1,"id":1}';
    exit ();
}
// devicesync
if ($method == 'com.apperian.easesdk.devicesync') {
    $result = $params->result;
    
// the params is empty
    if (empty ( $result )) {
	$response ['result'] = array (
	    'result' => 8,
	    'message' => 'The provided command has invalid arguments.' 
	);
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
    $arr = json_decode ( base64_decode ( $result ) );
    if (empty ( $arr )) {
	$response ['result'] = 3;
	$ret = json_encode ( $response );
	loginfo ( 'Response', '127.0.0.1', $ret );
	ob_clean ();
	echo $ret;
	exit ();
    }
    $ret = 0;
    foreach ( $arr as $dev ) {
	$devicesn = $dev->deviceSN;
	$status = $dev->status;
	
	$sta = 0;
	switch ($status) {
	case '2001' :
	    $sta = 1;
	    break;
	case '2002' :
	    $sta = 0;
	    break;
	case '2003' :
	    $sta = 0;
	    break;
	case '2004' :
	    $sta = 0;
	    break;
	case '2005' :
	    $sta = 0;
	    break;
	case '2006' :
	    $sta = 0;
	    break;
	default :
	    $sta = 0;
	    break;
	}
	
	$ret = dboperate ( 6, array (
	    'op' => 'select',
	    'query' => 'SELECT count(*) as num FROM devicelist WHERE  devicesn = \'' . $devicesn . '\'' 
	) );
	
	if (( int ) $ret [0] ['NUM'] == 0) {
// insert
	    $row = array (
		'psk' => 'DEVICELIST_PSK_SEQ.nextval',
		'devicesn' => $devicesn,
		'status' => $sta 
	    );
	    dboperate ( 6, array (
		'op' => 'insert',
		'table' => 'devicelist',
		'row' => $row 
	    ) );
	    $ret = 1;
	} else {
// update
	    $row = array (
		'status' => $sta 
	    );
	    dboperate ( 6, array (
		'op' => 'update',
		'table' => 'devicelist',
		'row' => $row,
		'where' => " devicesn = '" . $devicesn . "'" 
	    ) );
	    $ret = 2;
	}
	dboperate ( 4, array (
	    'devicesn' => $devicesn 
	) );
    }
    $response ['result'] = $ret;
    $ret = json_encode ( $response );
    loginfo ( 'Response', '127.0.0.1', $ret );
    ob_clean ();
    echo $ret;
    exit ();
}

// ------------------------------------------------------------------------------
/**
 * function name com.apperian.easesdk.notice
 *
 * @author Leo
 *        
 */
if ($method == 'com.apperian.easesdk.notice') {
    
    $sessionToken = $params->sessionToken;
/*
 * if ($session['token'] != $sessionToken || !$sessionToken) { loginfo('Response','127.0.0.1','token wrong');exit; }
 */
// @todo try catch
    $datetime = date ( 'Y-m-d H:i' );
// $sql="SELECT * FROM NOTICE WHERE ENABLEFLAG = 1
// AND REMINDTIME < TO_TIMESTAMP('".$datetime."','YYYY-MM-DD HH24:MI:SS')
// AND ENDTIME > TO_TIMESTAMP('".$datetime."','YYYY-MM-DD HH24:MI:SS')
// AND STARTTIME < TO_TIMESTAMP('".$datetime."','YYYY-MM-DD HH24:MI:SS')";
// $ret = dboperate(6,array('op'=>'select','query'=>$sql));
    
    $redisdata = $sredis->get ( 'notice' );
    if ($redisdata) {
	$notices = unserialize ( $redisdata );
	if (strtotime ( $notices [0] ['REMINDTIME'] ) < strtotime ( $datetime ) && strtotime ( $notices [0] ['ENDTIME'] ) > strtotime ( $datetime ) && strtotime ( $notices [0] ['STARTTIME'] ) < strtotime ( $datetime )) {
	    
	    foreach ( $notices [0] as $k => $v ) {
		$k = strtolower ( $k );
		$list ["{$k}"] = $v;
	    }
	}
    }
    $response ['result'] = $list;
    
    $ret = json_encode ( $response );
// loginfo('Response','127.0.0.1',$ret);
    ob_clean ();
    echo $ret;
    exit ();
}

// ------------------------------------------------------------------------------
function allowapppsk($usergroupid, $userid) {
    $sredis = new Redis ();
    $sredis->pconnect ( slaveredisip, slaveredisport );
    
// get user channel
    $channelinfo = unserialize ( $sredis->get ( 'mycard' . $userid ) );
    $userchannel = $channelinfo ['saleChannel'];
    
    $apppsk = array ();
    $keyinfo1 = unserialize ( $sredis->get ( 'usercorp' . $usergroupid ) );
// 	var_dump($keyinfo1);exit;
    if (! empty ( $keyinfo1 ['CORPID'] )) {
	$CORPID = unserialize ( $sredis->get ( 'groupperm' . $keyinfo1 ['CORPID'] ) );
	file_put_contents ( logurl . 'apppsk.log', 'CORPID--->'.serialize($CORPID) . "\r\n", FILE_APPEND );
	if (! empty ( $CORPID )) {
	    foreach ( $CORPID as $cidval ) {
		array_push ( $apppsk, $cidval );
	    }
	}
// channelget
	file_put_contents ( logurl . 'apppsk.log', 'CORPID--->'.serialize($apppsk) . "\r\n", FILE_APPEND );
	$apppsk = channelcheck ( $apppsk, $userchannel, $keyinfo1 ['CORPID'] );
	
	
    }
    if (! empty ( $keyinfo1 ['BRANCHID'] )) {
	$BRANCHID = unserialize ( $sredis->get ( 'groupperm' . $keyinfo1 ['BRANCHID'] ) );
	file_put_contents ( logurl . 'apppsk.log', 'BRANCHID--->'.serialize($BRANCHID) . "\r\n", FILE_APPEND );
	if (! empty ( $BRANCHID )) {
	    foreach ( $BRANCHID as $bidval ) {
		array_push ( $apppsk, $bidval );
	    }
	}
// channelget
	file_put_contents ( logurl . 'apppsk.log', 'BRANCHID--->'.serialize($apppsk) . "\r\n", FILE_APPEND );
	$apppsk = channelcheck ( $apppsk, $userchannel, $keyinfo1 ['BRANCHID'] );
	
    }
    
    if (! empty ( $keyinfo1 ['ZHONGZHIID'] )) {
	$ZHONGZHIID = unserialize ( $sredis->get ( 'groupperm' . $keyinfo1 ['ZHONGZHIID'] ) );
	file_put_contents ( logurl . 'apppsk.log', 'ZHONGZHIID--->'.serialize($ZHONGZHIID) . "\r\n", FILE_APPEND );
	if (! empty ( $ZHONGZHIID )) {
	    foreach ( $ZHONGZHIID as $zzidval ) {
		array_push ( $apppsk, $zzidval );
	    }
	}
// channelget
	file_put_contents ( logurl . 'apppsk.log', 'ZHONGZHIID--->'.serialize($apppsk) . "\r\n", FILE_APPEND );
	$apppsk = channelcheck ( $apppsk, $userchannel, $keyinfo1 ['ZHONGZHIID'] );
	
    }
    if (! empty ( $keyinfo1 ['ZHIID'] )) {
	$ZHIID = unserialize ( $sredis->get ( 'groupperm' . $keyinfo1 ['ZHIID'] ) );
	file_put_contents ( logurl . 'apppsk.log', 'ZHIID--->'.serialize($ZHIID) . "\r\n", FILE_APPEND );
	if (! empty ( $ZHIID )) {
	    foreach ( $ZHIID as $zidval ) {
		array_push ( $apppsk, $zidval );
	    }
	}
// channelget
	file_put_contents ( logurl . 'apppsk.log', 'ZHIID--->'.serialize($apppsk) . "\r\n", FILE_APPEND );
	$apppsk = channelcheck ( $apppsk, $userchannel, $keyinfo1 ['ZHIID'] );
	
    }
//var_dump($apppsk);exit;
    $keyinfo3 = unserialize ( $sredis->get ( 'whiteperm' . $userid ) );
    file_put_contents ( logurl . 'apppsk.log', 'whiteperm--->'.serialize($keyinfo3) . "\r\n", FILE_APPEND );
// 合并数组
    if (! empty ( $keyinfo3 )) {
	foreach ( $keyinfo3 as $wl ) {
	    array_push ( $apppsk, $wl );
	}
    }
    
// 去除重复
    $apppsk = array_unique ( $apppsk );
    $keyinfo4 = unserialize ( $sredis->get ( 'blackperm' . $userid ) );
    file_put_contents ( logurl . 'apppsk.log', 'blackperm--->'.serialize($keyinfo3) . "\r\n", FILE_APPEND );
    if (! empty ( $keyinfo4 )) {
// 剔除数组
	foreach ( $keyinfo4 as $bkl ) {
	    $key = array_search ( $bkl, $apppsk );
	    if ($key !== false) {
		unset($apppsk["{$key}"]);
// 				array_splice ( $apppsk, $key, 1 );
	    }
	}
    }
    file_put_contents ( logurl . 'apppsk.log', 'over--->'.serialize($keyinfo3) . "\r\n", FILE_APPEND );
    $apppsk = array_unique ( $apppsk );
    return $apppsk;
}
// channel check
function channelcheck($apppsk, $userchannel, $groupid) {
    if (! empty ( $userchannel )) {
	$sredis = new Redis ();
	$sredis->pconnect ( slaveredisip, slaveredisport );
	var_dump($apppsk);
// channelget
// white
	$CHANNEL = unserialize ( $sredis->get ( 'channel_white_perm_' . $userchannel . '_' . $groupid ) );
	if (! empty ( $CHANNEL )) {
	    foreach ( $CHANNEL as $ccapp ) {
		array_push ( $apppsk, $ccapp );
	    }
	}
	file_put_contents ( logurl . 'apppsk.log', 'channel_white_perm--->'.serialize($apppsk) . "\r\n", FILE_APPEND );
	$apppsk = array_unique ( $apppsk );
	file_put_contents ( logurl . 'apppsk.log', 'channel_white_perm--->'.serialize($apppsk) . "\r\n", FILE_APPEND );
// black
	
	$CHANNEL = unserialize ( $sredis->get ( 'channel_black_perm_' . $userchannel . '_' . $groupid ) );
	
	file_put_contents ( logurl . 'apppsk.log', 'channel_black_perm_--->'.serialize($CHANNEL) . "\r\n", FILE_APPEND );
	
	if (! empty ( $CHANNEL )) {
	    foreach ( $CHANNEL as $ccapp ) {
		$key = array_search ( $ccapp, $apppsk );
		if ($key !== false) {
// mod  by leo
		    unset($apppsk["{$key}"]);
// 					array_splice ( $apppsk, $key, 1 );
		    
//问题如下 
/* 					string '503' (length=3)
					
					array (size=9)
					0 => string '10' (length=2)
					1 => string '9' (length=1)
					2 => string '7' (length=1)
					3 => string '6' (length=1)
					4 => string '4' (length=1)
					5 => string '2' (length=1)
					7 => string '8' (length=1)
					8 => string '503' (length=3)
					11 => string '1' (length=1)
					
					8
					
					string '502' (length=3)
					
					array (size=8)
					0 => string '10' (length=2)
					1 => string '9' (length=1)
					2 => string '7' (length=1)
					3 => string '6' (length=1)
					4 => string '4' (length=1)
					5 => string '2' (length=1)
					6 => string '8' (length=1)
					7 => string '503' (length=3) */
		    
		}
	    }
	}
	file_put_contents ( logurl . 'apppsk.log', 'over_channel_perm--->'.serialize($apppsk) . "\r\n", FILE_APPEND );
    }
    return $apppsk;
}
function write_login_log($emial, $devicesn) {
    $time_path = log_login_path . date ( 'Ymd' ) . '/';
    ! is_dir ( $time_path ) && mkdir ( $time_path );
    $str = "工号：" . $emial . "|设备号：" . $devicesn . "|日期：" . date ( 'Y-m-d H:i:s' ) . "\r\n";
    $fp = fopen ( $time_path . 'log.txt', 'a+' );
    if (flock ( $fp, LOCK_EX )) { // 进行排它型锁定
	if (false !== fwrite ( $fp, $str )) {
	    if (file_exists ( $time_path . 'num.txt' )) { $num = file_get_contents ( $time_path . 'num.txt' ); file_put_contents ( $time_path . 'num.txt', intval ( $num ) + 1 ); } else {
		file_put_contents ( $time_path . 'num.txt', 1 );
	    }
	}
	flock ( $fp, LOCK_UN ); // 释放锁定
    }
    fclose ( $fp );
}
